#include <iostream>
#include <vector>
#include <float.h>
#define N 18
using namespace std;

vector< vector< float > > graph = {
{0, 0.6, 1.3, 0.23, 0.75, 0.8, 1.2, 3.7, 3.4, 1.6, 0.4, 1.8, 2.3, 1.3, 1.9, 1.8, 3.2, 1.4},
{0.6, 0, 1.9, 0.85, 1.3, 1.4, 1.4, 4.2, 4.1, 1.5, 0.55, 2.8, 3.3, 0.9, 1.9, 2.8, 4.2, 1.3},
{1.3, 1.9, 0, 1.1, 0.7, 0.65, 1.1, 2.3, 2.4, 1.2, 1.4, 1.1, 1.3, 2.5, 1.4, 1.1, 2.2, 1.7},
{0.23, 0.85, 1.1, 0, 0.75, 0.8, 1, 3.4, 3.2, 1.4, 0.65, 1.6, 2, 1.6, 1.7, 1.6, 2.8, 1.7},
{0.75, 1.3, 0.7, 0.75, 0, 0.05, 1.2, 2.9, 2.8, 1.4, 0.8, 1.9, 2.1, 2.1, 1.7, 1.8, 2.9, 0.95},
{0.8, 1.4, 0.65, 0.8, 0.05, 0, 1.2, 2.7, 2.7, 1.3, 0.85, 1.8, 1.6, 2.1, 1.7, 1.8, 2.8, 1},
{1.2, 1.4, 1.1, 1, 1.2, 1.2, 0, 2.7, 2.7, 1.3, 1.5, 1.6, 1.2, 4.2, 2.1, 1.9, 2,  2.6},
{3.7, 4.2, 2.3, 3.4, 2.8, 2.9, 2.7, 0, 0.7, 2.3, 3.8, 1.6, 1.3, 4.2, 1.2, 2, 1.9, 3.8},
{3.4, 4.1, 2.4, 3.2, 2.8, 2.7, 2.7, 0.7, 0, 2.1, 3.6, 1.5, 1.1, 4.7, 2.1, 1.9, 2, 3.5},
{1.6, 1.5, 1.2, 1.4, 1.4, 1.3, 1.3, 2.3, 2.1, 0, 1.6, 1.1, 1.4, 2, 1.1, 0.85, 2.5, 2.8},
{0.4, 0.55, 1.4, 0.65, 0.8, 0.85, 1.5, 3.8, 3.6, 1.6, 0, 2.2, 2.5, 1.3, 2.9, 2.2, 3.6, 1},
{1.8, 2.8, 1.1, 1.6, 1.9, 1.8, 1.6, 1.6, 1.5, 1.1, 2.2, 0, 0.95, 2.8, 0.5, 0.4, 1.9, 2.8},
{2.3, 3.3, 1.3, 2, 2.1, 1.6, 1.2, 1.3, 1.1, 1.4, 2.5, 0.95, 0, 3.2, 1, 0.95, 1.2, 2.6},
{1.3, 0.9, 2.5, 1.6, 2.1, 2.1, 4.2, 4.2, 4.7, 2, 1.3, 2.8, 3.2, 0, 2.8, 2.8, 3.8, 2.1},
{1.9, 1.9, 1.4, 1.7, 1.7, 1.7, 2.1, 1.2, 2.1, 1.1, 2.9, 0.5, 1, 2.8, 0, 0.5, 2.8, 3.1},
{1.8, 2.8, 1.1, 1.6, 1.8, 1.8, 1.9, 2, 1.9, 0.85, 2.2, 0.4, 0.95, 2.8, 0.5, 0, 1.8, 2.9},
{3.2, 4.2, 2.2, 2.8, 2.9, 2.8, 2, 1.9, 2, 2.5, 3.6, 1.9, 1.2, 3.8, 2.8, 1.8, 0, 3.8},
{1.4, 1.3, 1.7, 1.7, 0.95, 1, 2.6, 3.8, 3.8, 2.8, 1, 2.8, 2.6, 2.1, 3.1, 2.9, 3.8, 0}
};
vector< vector< float > > dp = { ( 1 << N ), vector< float >( N, -1 ) };

float TSP( int visit, int now ) {
	if ( dp[ visit ][ now ] != -1 )
		return dp[ visit ][ now ];
	dp[ visit ][ now ] = FLT_MAX;
	for ( int i = 0; i < N; i++ )
		if ( i != now && ( visit & ( 1 << i ) ) )
			dp[ visit ][ now ] = min( dp[ visit ][ now ], TSP( visit - ( 1 << now ), i ) + graph[ now ][ i ] );
	return dp[ visit ][ now ];
}

int main() {
	for ( int i = 0; i < N; i++ )
		dp[ 1 << i ][ i ] = graph[ 0 ][ i ];
	cout<< TSP( ( 1 << N ) - 1, 0 ) << endl;

	int X = 0, XN, route = ( 1 << N ) - 1;
    for ( int i = 0; i < N; i++ ){
        float MIN = FLT_MAX;
        for ( int j = 0; j < N; j++ ){
            if( X != j && ( route & ( 1 << j ) ) && ( MIN >= dp[ route - ( 1 << X ) ][ j ] + graph[ X ][ j ] ) ){
                MIN = dp[ route - ( 1 << X ) ][ j ] + graph[ X ][ j ];
                XN = j;
            }
        }
        cout<<dp[ route - ( 1 << X ) ][ XN ]<<" "<<graph[ X ][ XN ]<<" ";
        cout<< X <<" "<<endl;
        route -= (1<<X);
        X = XN;
    }

	return 0;
}
